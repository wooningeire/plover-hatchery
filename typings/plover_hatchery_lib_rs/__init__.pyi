from collections.abc import Callable
from typing import TYPE_CHECKING


class Keysymbol:
    @property
    def symbol(self) -> str: ...
    @property
    def base_symbol(self) -> str: ...
    @property
    def stress(self) -> int: ...
    @property
    def optional(self) -> bool: ...

    def __init__(self, symbol: str, stress: int, optional: bool, /) -> None: ...

    @staticmethod
    def new_with_known_base_symbol(symbol: str, base_symbol: str, stress: int, optional: bool, /) -> Keysymbol: ...

    @property
    def is_vowel(self) -> bool: ...

    @property
    def is_consonant(self) -> bool: ...


class Sopheme:
    @property
    def chars(self) -> str: ...
    @property
    def keysymbols(self) -> list[Keysymbol]: ...

    def __init__(self, chars: str, keysymbols: list[Keysymbol], /) -> None: ...

    @property
    def can_be_silent(self) -> bool: ...


class Transclusion:
    @property
    def target_varname(self) -> str: ...
    @property
    def stress(self) -> int: ...

    def __init__(self, target_varname: str, stress: int, /) -> None: ...

class Entity:
    class Sopheme(Entity):
        def __init__(self, sopheme: Sopheme, /) -> None: ...

    class Transclusion(Entity):
        def __init__(self, transclusion: Transclusion, /) -> None: ...

    @property
    def maybe_sopheme(self) -> Sopheme | None: ...

    @property
    def maybe_transclusion(self) -> Transclusion | None: ...

class RawableEntity:
    @property
    def maybe_entity(self) -> Entity | None: ...

    @property
    def maybe_raw_def(self) -> Def | None: ...

    class Entity(RawableEntity):
        def __init__(self, entity: Entity, /) -> None: ...

    class RawDef(RawableEntity):
        def __init__(self, definition: Def, /) -> None: ...


class EntitySeq:
    @property
    def entities(self) -> list[Entity]: ...

    def __init__(self, entities: list[Entity], /) -> None: ...

class Def:
    @property
    def rawables(self) -> list[RawableEntity]: ...
    @property
    def varname(self) -> str: ...

    def __init__(self, rawables: list[RawableEntity], varname: str, /) -> None: ...

class DefDict:
    def add(self, varname: str, definition: EntitySeq, /) -> None: ...
    def get_def(self, varname: str, /) -> Def: ...
    def foreach_key(self, callable: Callable[[str], None], /) -> None: ...


class SophemeSeq:
    @property
    def sophemes(self) -> list[Sopheme]: ...

    def __init__(self, sophemes: list[Sopheme], /) -> None: ...

class DefView:
    @property
    def defs(self) -> DefDict: ...
    @property
    def root_def(self) -> Def: ...

    def __init__(self, defs: DefDict, base_def: Def, /) -> None: ...
    def collect_sophemes(self) -> SophemeSeq: ...
    def translation(self) -> str: ...

    def foreach_keysymbol(self, callable: Callable[[DefViewCursor, Keysymbol], None], /) -> None: ...

    @property
    def first_consonant_loc(self) -> list[int]: ...
    @property
    def last_consonant_loc(self) -> list[int]: ...


class DefViewItem:
    @property
    def maybe_keysymbol(self) -> Keysymbol | None: ...

    @property
    def maybe_sopheme(self) -> Sopheme | None: ...

    class Keysymbol(DefViewItem):
        def __init__(self, keysymbol: Keysymbol, /) -> None: ...

class DefViewCursor:
    def __init__(self, view: DefView, index_stack: list[int], /) -> None: ...

    @property
    def view(self) -> DefView: ...
    @property
    def index_stack(self) -> list[int]: ...

    def tip(self) -> DefViewItem | None: ...
    def nth(self, level: int, /) -> DefViewItem | None: ...

    @property
    def stack_len(self) -> int: ...

def optionalize_keysymbols(view: DefView, condition: Callable[[DefViewCursor], bool]) -> Def: ...