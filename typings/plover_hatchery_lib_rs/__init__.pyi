from collections.abc import Callable, Sequence
from typing import Literal, final


class Keysymbol:
    @property
    def symbol(self) -> str: ...
    @property
    def base_symbol(self) -> str: ...
    @property
    def stress(self) -> int: ...
    @property
    def optional(self) -> bool: ...

    def __init__(self, symbol: str, stress: int, optional: bool, /) -> None: ...

    @staticmethod
    def new_with_known_base_symbol(symbol: str, base_symbol: str, stress: int, optional: bool, /) -> Keysymbol: ...

    @property
    def is_vowel(self) -> bool: ...

    @property
    def is_consonant(self) -> bool: ...


class Sopheme:
    @property
    def chars(self) -> str: ...
    @property
    def keysymbols(self) -> list[Keysymbol]: ...

    def __init__(self, chars: str, keysymbols: list[Keysymbol], /) -> None: ...

    @property
    def can_be_silent(self) -> bool: ...


class Transclusion:
    @property
    def target_varname(self) -> str: ...
    @property
    def stress(self) -> int: ...

    def __init__(self, target_varname: str, stress: int, /) -> None: ...

class Entity:
    class Sopheme(Entity):
        def __init__(self, sopheme: Sopheme, /) -> None: ...

    class Transclusion(Entity):
        def __init__(self, transclusion: Transclusion, /) -> None: ...

    class RawDef(Entity):
        def __init__(self, definition: Def, /) -> None: ...

class Def:
    @property
    def entities(self) -> list[Entity]: ...
    @property
    def varname(self) -> str: ...

    def __init__(self, entities: Sequence[Entity], varname: str, /) -> None: ...

class DefDict:
    def add(self, varname: str, definition: Sequence[Entity], /) -> None: ...
    def get_def(self, varname: str, /) -> Def: ...
    def foreach_key(self, callable: Callable[[str], None], /) -> None: ...


class SophemeSeq:
    @property
    def sophemes(self) -> list[Sopheme]: ...

    def __init__(self, sophemes: Sequence[Sopheme], /) -> None: ...

class DefView:
    @property
    def defs(self) -> DefDict: ...
    @property
    def root_def(self) -> Def: ...

    def __init__(self, defs: DefDict, base_def: Def, /) -> None: ...
    def collect_sophemes(self) -> SophemeSeq: ...
    def translation(self) -> str: ...

    def foreach(self, callable: Callable[[DefViewCursor], None], /) -> None: ...
    def foreach_keysymbol(self, callable: Callable[[DefViewCursor, Keysymbol], None], /) -> None: ...

    @property
    def first_consonant_cur(self) -> tuple[int, ...] | None: ...
    @property
    def last_consonant_cur(self) -> tuple[int, ...] | None: ...
    @property
    def first_vowel_cur(self) -> tuple[int, ...] | None: ...
    @property
    def last_vowel_cur(self) -> tuple[int, ...] | None: ...


class DefViewItem:
    @property
    def n_children(self) -> int: ...

    def keysymbol(self) -> Keysymbol: ...
    def sopheme(self) -> Sopheme: ...

    @final
    class Keysymbol(DefViewItem):
        __match_args__ = ("__keysymbol",)

        __keysymbol: Keysymbol
        def __init__(self, keysymbol: Keysymbol, /) -> None: ...

    @final
    class Sopheme(DefViewItem):
        __match_args__ = ("__sopheme",)

        __sopheme: Sopheme
        def __init__(self, sopheme: Sopheme, /) -> None: ...

class DefViewCursor:
    def __init__(self, view: DefView, index_stack: Sequence[int], /) -> None: ...

    @property
    def view(self) -> DefView: ...
    @property
    def index_stack(self) -> tuple[int, ...]: ...

    def tip(self) -> DefViewItem: ...
    def maybe_tip(self) -> DefViewItem | None: ...
    
    def nth(self, level: int, /) -> DefViewItem: ...
    def maybe_nth(self, level: int, /) -> DefViewItem | None: ...

    def next_keysymbol_cur(self) -> DefViewCursor | None: ...
    def prev_keysymbol_cur(self) -> DefViewCursor | None: ...

    def occurs_before_first_consonant(self) -> bool: ...
    def occurs_after_last_consonant(self) -> bool: ...
    def occurs_before_first_vowel(self) -> bool: ...
    def occurs_after_last_vowel(self) -> bool: ...

    @property
    def stack_len(self) -> int: ...

def optionalize_keysymbols(view: DefView, condition: Callable[[DefViewCursor], bool], /) -> Def: ...
def add_diphthong_keysymbols(view: DefView, map_keysymbols: Callable[[DefViewCursor], Sequence[Keysymbol]], /) -> Def: ...